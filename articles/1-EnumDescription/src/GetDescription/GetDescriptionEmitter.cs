using System.Text;
using EnumDescription.Generators.GetDescription.Models;

namespace EnumDescription.Generators.GetDescription;

internal static class GetDescriptionEmitter
{
    public static (string GeneratedSource, string FileName) Emit(GetDescriptionExtensionClass enumExtension)
    {
        var builder = new StringBuilder();
        
        builder.Clear();
        builder.AppendLine("// <auto-generated/>");
        builder.AppendLine("#nullable enable");
        GenerateType(builder, enumExtension);
        builder.AppendLine("#nullable disable");
        
        return (builder.ToString(), $"{enumExtension.Name}DescriptionExtensions.g.cs");
    }

    private static void GenerateType(StringBuilder builder, GetDescriptionExtensionClass enumExtension)
    {
        builder.AppendLine($"namespace {enumExtension.Namespace}");
        builder.AppendLine("{{");
        builder.AppendLine($"    public static class {enumExtension.Name}DescriptionExtensions");
        builder.AppendLine("    {{");
        
        GenerateMethod(builder, enumExtension.FullName, enumExtension.EnumMembersToDescriptions);
        
        builder.AppendLine("    }}");
        builder.AppendLine("}}");
    }

    private static void GenerateMethod(
        StringBuilder builder, 
        string enumFullName,
        IReadOnlyList<EnumMemberToDescription> enumMembersToDescriptions)
    {
        builder.AppendLine($"        public static string GetDescription(this {enumFullName} value)");
        builder.AppendLine("        {");
        builder.AppendLine("            return value switch");
        builder.AppendLine("            {");
        
        foreach (var enumMemberToDescription in enumMembersToDescriptions)
        {
            builder.AppendLine($"                {enumFullName}.{enumMemberToDescription.MemberName} => \"{enumMemberToDescription.Value}\",");
        }
        
        builder.AppendLine("                _ => string.Empty");
        builder.AppendLine("            }");
        builder.AppendLine("        }");
    }
}