using Microsoft.CodeAnalysis;

namespace EnumDescription.Generators.Tests;

public sealed class GetDescriptionGeneratorTests
{
    [Fact]
    public void ItWillGenerateGetDescriptionExtension()
    {
        const string source = $@"
using System.ComponentModel;
using EnumDescription.Generators;

namespace Test.Enums;

[EnumDescription]
public enum Country
{{
    [Description(""United States"")]
    US,

    [Description(""Canada"")]
    CA,

    [Description(""United Kingdom"")]
    UK
}}
";

        const string generated = @"
// <auto-generated/>
#nullable enable
namespace Test.Enums
{{
    public static class CountryDescriptionExtensions
    {{
        public static string GetDescription(this Test.Enums.Country value)
        {
            return value switch
            {
                Test.Enums.Country.US => ""United States"",
                Test.Enums.Country.CA => ""Canada"",
                Test.Enums.Country.UK => ""United Kingdom"",
                _ => string.Empty
            }
        }
    }}
}}
#nullable disable
";
        
        var (diagnostics, output) = TestHelpers.Generate<EnumDescriptionGenerator>(source);
        
        Assert.Empty(diagnostics);
        Assert.Equal(generated.Trim(), output.Trim(), ignoreLineEndingDifferences: true);
    }
    
    [Fact]
    public void ItWillReportDiagnosticForMissingDescriptionAttribute()
    {
        const string source = $@"
using System.ComponentModel;
using EnumDescription.Generators;

namespace Test.Enums;

[EnumDescription]
public enum Country
{{
    [Description(""United States"")]
    US,

    [Description(""Canada"")]
    CA,

    UK
}}
";
        
        const string generated = @"
// <auto-generated/>
#nullable enable
namespace Test.Enums
{{
    public static class CountryDescriptionExtensions
    {{
        public static string GetDescription(this Test.Enums.Country value)
        {
            return value switch
            {
                Test.Enums.Country.US => ""United States"",
                Test.Enums.Country.CA => ""Canada"",
                _ => string.Empty
            }
        }
    }}
}}
#nullable disable
";

        var (diagnostics, output) = TestHelpers.Generate<EnumDescriptionGenerator>(source);

        var diagnostic = Assert.Single(diagnostics);
        Assert.Equal("EDE0001", diagnostic.Id);
        Assert.Equal("UK", GetDiagnosticTarget(diagnostic));
        
        Assert.Equal(generated.Trim(), output.Trim(), ignoreLineEndingDifferences: true);
    }

    private static string GetDiagnosticTarget(Diagnostic diagnostic)
    {
        var location = diagnostic.Location;
        Assert.NotNull(location);
        
        var tree = location.SourceTree;
        Assert.NotNull(tree);
        
        var sourceText = tree.GetText();
        var span = location.SourceSpan;
        
        return sourceText.GetSubText(span).ToString();
    }
}